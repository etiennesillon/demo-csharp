pool:
  name: Hosted VS2017
  demands:
  - msbuild
  - visualstudio
  - vstest

steps:
- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.4.1'
  inputs:
    versionSpec: 4.4.1

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: '**\*.sln'

- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    solution: '**\*.sln'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactstagingdirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'

- task: PowerShell@2
  displayName: 'Set Sauce Environment Variables'
  inputs:
    targetType: filePath
    filePath: ./setEnvironmentVariables.ps1
    arguments: '$env:sauce_userName sauce_accessKey $env:SAUCE_RDC_VODQANATIVEAPPAPIKEY $env:SAUCE_RDC_SauceDemoIosRdcApiKey'

- task: VSTest@2
  displayName: 'Run Best Practices Framework'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\*Selenium3.Nunit.Framework.dll'
    testFiltercriteria: 'TestCategory=BestPractices'
    runInParallel: true
    codeCoverageEnabled: true
    testRunTitle: 'NUnit Automation Framework'
    rerunFailedTests: true
    rerunFailedThreshold: 10
    rerunMaxAttempts: 2



# Using powershell ##vso command to set an environment variable in the system
#- powershell: |
#   Write-Host "Sauce Username stored in ADO variables is=> $($env:SAUCE_USER)";
#   Write-Host "Sauce Access Key stored in ADO variables is=> $($env:SAUCE_KEY)";
#   Write-Host ("##vso[task.setvariable variable=SAUCE_USERNAME]$($env:SAUCE_USER)")
#   Write-Host ("##vso[task.setvariable variable=SAUCE_ACCESS_KEY]$($env:SAUCE_KEY)")
